{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\sehrish.ahmed\\\\Desktop\\\\redux\\\\redux-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\sehrish.ahmed\\\\Desktop\\\\redux\\\\redux-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // import axios from 'axios';\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); // const redux = require('redux')\n// const reduxLogger = require('redux-logger')\n// const createStore = redux.createStore\n// const combineReducers = redux.combineReducers\n// const applyMiddleware = redux.applyMiddleware\n// const logger = reduxLogger.createLogger()\n// const BUY_CAKE = 'BUY_CAKE';\n// const BUY_ICECREAM = 'BUY_ICECREAM';\n// //////////   action   /////////////\n// function buyCake () {\n//     return {\n//         type: BUY_CAKE,\n//         info: 'First redux action'\n//     }\n// }\n// function buyIceCream () {\n//     return {\n//         type: BUY_ICECREAM  \n//     }\n// }\n// // const initialState = {\n// //     noOfCakes: 10,\n// //     noOfIceCream: 20\n// // }\n// /////////       pev state     /////////////\n// const initialCakeState = {\n//     noOfCakes: 10,\n// }\n// const initialIceCreamState = {\n//     noOfIceCream: 20\n// }\n// // const reducer = (state = initialState, action) => {\n// //     switch(action.type) {\n// //         case BUY_CAKE: return {\n// //             ...state,\n// //             noOfCakes: state.noOfCakes - 1\n// //         }\n// //         case BUY_ICECREAM: return {\n// //             ...state,\n// //             noOfIceCream: state.noOfIceCream - 1\n// //         }\n// //          default: return state;\n// //     }\n// // }\n// ////////////      next state       //////////////\n// const cakeReducer = (state = initialCakeState, action) => {\n//     switch(action.type) {\n//         case BUY_CAKE: return {\n//             ...state,\n//             noOfCakes: state.noOfCakes - 1\n//         }\n//         default: return state;\n//     }\n// }\n// const iceCreamReducer = (state = initialIceCreamState, action) => {\n//     switch(action.type) {\n//         case BUY_ICECREAM: return {\n//             ...state,\n//             noOfIceCream: state.noOfIceCream - 1\n//         }\n//          default: return state;\n//     }\n// }\n// const rootReducers = combineReducers({\n//     cake: cakeReducer,\n//     iceCream: iceCreamReducer\n// })\n// const store = createStore(rootReducers, applyMiddleware(logger))\n// console.log('initial state', store.getState())\n// const unsubscribe = store.subscribe(() => console.log('updated state', store.getState()))\n// store.dispatch(buyCake())\n// store.dispatch(buyCake())\n// store.dispatch(buyCake())\n// store.dispatch(buyIceCream())\n// store.dispatch(buyIceCream())\n// unsubscribe()\n\nconst redux = require('redux');\n\nconst createStore = redux.createStore;\nconst applyMiddleware = redux.applyMiddleware;\n\nconst thunkMiddleware = require('redux-thunk').default;\n\nconst axios = require('axios');\n\nconst initialState = {\n  loading: false,\n  users: [],\n  error: ''\n};\nconst FATCH_USERS_REQUEST = 'FATCH_USERS_REQUEST';\nconst FATCH_USERS_SUCCESS = 'FATCH_USERS_SUCCESS';\nconst FATCH_USERS_FAILURE = 'FATCH_USERS_FAILURE';\n\nconst fetchUsersRequest = () => {\n  return {\n    type: FATCH_USERS_REQUEST\n  };\n};\n\nconst fetchUsersSuccess = users => {\n  return {\n    type: FATCH_USERS_SUCCESS,\n    payload: users\n  };\n};\n\nconst fetchUsersFailure = error => {\n  return {\n    type: FATCH_USERS_FAILURE,\n    payload: error\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FATCH_USERS_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case FATCH_USERS_SUCCESS:\n      return {\n        loading: false,\n        users: action.payload,\n        error: ''\n      };\n\n    case FATCH_USERS_FAILURE:\n      return {\n        loading: false,\n        users: [],\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst fetchUsers = () => {\n  return function (dispatch) {\n    dispatch(fetchUsersRequest());\n    axios.get('https://tk-whatsapp.herokuapp.com/messages').then(response => {\n      const users = response.data.map(messages => messages.name);\n      console.log(users);\n      dispatch(fetchUsersSuccess(users));\n    }).catch(error => {\n      dispatch(fetchUsersFailure(error));\n    });\n  };\n};\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\nstore.subscribe(() => {\n  console.log(store.getState());\n});\nstore.dispatch(fetchUsers);","map":{"version":3,"sources":["C:/Users/sehrish.ahmed/Desktop/redux/redux-app/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","render","document","getElementById","unregister","redux","require","createStore","applyMiddleware","thunkMiddleware","default","axios","initialState","loading","users","error","FATCH_USERS_REQUEST","FATCH_USERS_SUCCESS","FATCH_USERS_FAILURE","fetchUsersRequest","type","fetchUsersSuccess","payload","fetchUsersFailure","reducer","state","action","fetchUsers","dispatch","get","then","response","data","map","messages","name","console","log","catch","store","subscribe","getState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import axios from 'axios';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// const redux = require('redux')\n// const reduxLogger = require('redux-logger')\n\n// const createStore = redux.createStore\n// const combineReducers = redux.combineReducers\n// const applyMiddleware = redux.applyMiddleware\n// const logger = reduxLogger.createLogger()\n\n// const BUY_CAKE = 'BUY_CAKE';\n// const BUY_ICECREAM = 'BUY_ICECREAM';\n\n\n\n// //////////   action   /////////////\n// function buyCake () {\n//     return {\n//         type: BUY_CAKE,\n//         info: 'First redux action'\n//     }\n// }\n\n// function buyIceCream () {\n//     return {\n//         type: BUY_ICECREAM  \n//     }\n// }\n\n// // const initialState = {\n// //     noOfCakes: 10,\n// //     noOfIceCream: 20\n// // }\n\n\n// /////////       pev state     /////////////\n\n// const initialCakeState = {\n//     noOfCakes: 10,\n// }\n\n\n// const initialIceCreamState = {\n//     noOfIceCream: 20\n// }\n\n// // const reducer = (state = initialState, action) => {\n// //     switch(action.type) {\n// //         case BUY_CAKE: return {\n// //             ...state,\n// //             noOfCakes: state.noOfCakes - 1\n// //         }\n// //         case BUY_ICECREAM: return {\n// //             ...state,\n// //             noOfIceCream: state.noOfIceCream - 1\n// //         }\n// //          default: return state;\n// //     }\n// // }\n\n\n\n// ////////////      next state       //////////////\n\n// const cakeReducer = (state = initialCakeState, action) => {\n//     switch(action.type) {\n//         case BUY_CAKE: return {\n//             ...state,\n//             noOfCakes: state.noOfCakes - 1\n//         }\n//         default: return state;\n//     }\n// }\n\n// const iceCreamReducer = (state = initialIceCreamState, action) => {\n//     switch(action.type) {\n//         case BUY_ICECREAM: return {\n//             ...state,\n//             noOfIceCream: state.noOfIceCream - 1\n//         }\n//          default: return state;\n//     }\n// }\n\n\n\n\n\n// const rootReducers = combineReducers({\n//     cake: cakeReducer,\n//     iceCream: iceCreamReducer\n// })\n// const store = createStore(rootReducers, applyMiddleware(logger))\n// console.log('initial state', store.getState())\n// const unsubscribe = store.subscribe(() => console.log('updated state', store.getState()))\n// store.dispatch(buyCake())\n// store.dispatch(buyCake())\n// store.dispatch(buyCake())\n// store.dispatch(buyIceCream())\n// store.dispatch(buyIceCream())\n// unsubscribe()\n\n\n\n\n\n\n\n\nconst redux = require('redux')\nconst createStore = redux.createStore\nconst applyMiddleware = redux.applyMiddleware\nconst thunkMiddleware = require('redux-thunk').default\nconst axios = require('axios')\n\nconst initialState = {\n    loading: false,\n    users: [],\n    error: ''\n}\n\nconst FATCH_USERS_REQUEST = 'FATCH_USERS_REQUEST'\nconst FATCH_USERS_SUCCESS = 'FATCH_USERS_SUCCESS'\nconst FATCH_USERS_FAILURE = 'FATCH_USERS_FAILURE'\n\n\nconst fetchUsersRequest = () => {\n    return {\n        type: FATCH_USERS_REQUEST\n    }\n}\n\nconst fetchUsersSuccess = users => {\n    return {\n        type: FATCH_USERS_SUCCESS,\n        payload: users\n    }\n}\n\nconst fetchUsersFailure = error => {\n    return {\n        type: FATCH_USERS_FAILURE,\n        payload: error\n    }\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FATCH_USERS_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case FATCH_USERS_SUCCESS:\n            return {\n                loading: false,\n                users: action.payload,\n                error: '',\n            }\n\n        case FATCH_USERS_FAILURE:\n            return {\n                loading: false,\n                users: [],\n                error: action.payload\n            }\n        default: return state;\n    }\n}\n\nconst fetchUsers = () => {\n    return function (dispatch) {\n        dispatch(fetchUsersRequest())\n        axios.get('https://tk-whatsapp.herokuapp.com/messages')\n            .then(response => {\n                const users = response.data.map(messages => messages.name)\n                console.log(users)\n                dispatch(fetchUsersSuccess(users))\n            })\n            .catch(error => {\n                dispatch(fetchUsersFailure(error))\n            })\n    }\n}\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware))\nstore.subscribe(() => { console.log(store.getState()) })\nstore.dispatch(fetchUsers)"]},"metadata":{},"sourceType":"module"}